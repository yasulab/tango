package tango.server.messenger;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;


import com.google.gwt.user.server.rpc.RemoteServiceServlet;

import tango.client.Tango;
import tango.client.messenger.MessengerService;
import tango.client.messenger.RefreshShareTangoEvent;
import tango.client.messenger.SendMessageEvent;
import tango.client.messenger.SendSavedTangoEvent;
import tango.client.messenger.SignOffEvent;
import tango.client.messenger.SignOnEvent;
import tango.client.messenger.model.Contact;
import tango.client.messenger.model.Message;
import tango.client.ui.PickupTango;
import tango.server.messenger.AbstractMessengerService.UserInfo;

public class MessengerServiceImpl extends RemoteServiceServlet implements MessengerService {

	protected static final int MAX_MESSAGE_LENGTH = 256;
	protected static final int MAX_NAME_LENGTH = 10;


	// 各ユーザの情報を格納するクラス
	private class UserInfo{
		Contact contact;
		ArrayList events = new ArrayList();
		ArrayList<PickupTango> savedTangoList = new ArrayList<PickupTango>();
	}	

	private ArrayList<ArrayList<PickupTango>> test = new ArrayList<ArrayList<PickupTango>>();
	private Map users = new HashMap();

	// 誰かがサインインしたときに呼び出される関数
	public void signIn( String name, ArrayList<PickupTango> pickupTangoList){		
		//adjust name
		name = cleanString( name, MAX_NAME_LENGTH );		

		//add user to list
		String id = getThreadLocalRequest().getSession().getId();
		UserInfo user = new UserInfo();
		user.contact = new Contact( name );
		user.savedTangoList = pickupTangoList;
		synchronized( this ){
			users.put( id, user );
		}

		//create sign on event
		SignOnEvent event = new SignOnEvent();
		event.contact = user.contact;
		broadcastEvent( event, user );	// 自分(user)以外の全体にSignOnEventを送る

		//add sign on events for current contact list
		synchronized( this ){
			Set entrySet = users.entrySet();
			for( Iterator it = entrySet.iterator(); it.hasNext(); )
			{
				Map.Entry entry = (Map.Entry)it.next();
				UserInfo userTemp = (UserInfo)entry.getValue();
				if( userTemp != user )
				{
					SignOnEvent eventTemp = new SignOnEvent();
					eventTemp.contact = userTemp.contact;
					user.events.add( eventTemp );
				}
			}
		}
	}

	// 誰かがサインアウトしたときに呼び出される関数
	public void signOut(){
		System.out.println("signOut() in MessengerServiceImpl has done.");
		//remove user from list
		Contact contact;
		String id = getThreadLocalRequest().getSession().getId();
		synchronized( this ){
			UserInfo user = (UserInfo)users.get(id);
			contact = user.contact;
			users.remove(id);
		}

		//create sign on event
		SignOffEvent event = new SignOffEvent();
		event.contact = contact;
		broadcastEvent( event, null ); // 全体にSignOffEventを送る
	}

	// 待ち時間(30秒)が過ぎたとき, 待ちEventがないかどうか確認する関数
	public ArrayList getEvents(){
		ArrayList events = null;
		UserInfo user = getCurrentUser();
		if( user != null ){
			if( user.events.size() == 0 ){
				try{
					synchronized( user ){
						user.wait( 30*1000 );
					}
				} 
				catch (InterruptedException ignored){}
			}
			synchronized( user ){
				events = user.events;
				user.events = new ArrayList();
			}
		}
		return events;
	}

	// ContactにMessageを送るときに呼び出される関数
	public void sendMessage( Contact to, Message message ){
		//adjust message
		String cleanMessage = cleanString( message.getMessage(), MAX_MESSAGE_LENGTH );

		//get sender and receiver
		UserInfo sender = getCurrentUser();
		UserInfo receiver = getUserByName( to.getName() );

		if( receiver != null ){
			//create event
			SendMessageEvent event = new SendMessageEvent();
			event.sender = sender.contact;
			event.message = new Message( cleanMessage );

			//send event to receiver
			synchronized( receiver ){
				receiver.events.add( event );
				receiver.notifyAll();
			}
		}
	}

	// on関数からsendSavedTangoが呼び出されたときに実行される関数
	public void sendSavedTango(PickupTango pickupTango) {
		System.out.println("sendSavedTango in MessengerServiceImpl has started!");

		// add pickupTango into userInfo
		UserInfo sender = getCurrentUser();
		sender.savedTangoList.add(pickupTango);

		//create SendSavedTangoEvent
		SendSavedTangoEvent event = new SendSavedTangoEvent();
		event.pickupTango = pickupTango;
		event.isList = false;
		broadcastEvent( event, null ); // 全体にSendSavedTangoEventを送る
	}

	public void sendSavedTangoList(ArrayList<PickupTango> pickupTangoList) {
		System.out.println("sendSavedTangoList in MessengerServiceImpl has started!");

		//create SendSavedTangoEvent
		SendSavedTangoEvent event = new SendSavedTangoEvent();
		event.pickupTangoList = pickupTangoList;
		event.isList = true;
		broadcastEvent( event, null ); // 全体にSendSavedTangoEventを送る
	}

	public void refreshShareTangoList(ArrayList<PickupTango> pickupTangoList) {
		System.out.println("refreshShareTangoList in MessengerServiceImpl has started!");

		// refresh saved tango list
		UserInfo myUserInfo = this.getCurrentUser();
		// myUserInfo.savedTangoList.clear();
		myUserInfo.savedTangoList = pickupTangoList;
		System.out.print("myUserInfo.savedTangoList:");
		showPickupTangoList(myUserInfo.savedTangoList);
		
		//create SendSavedTangoEvent
		RefreshShareTangoEvent event = new RefreshShareTangoEvent();
		ArrayList<ArrayList<PickupTango>> refreshShareTangoList = new ArrayList<ArrayList<PickupTango>>();
		refreshShareTangoList = getAllUserTangoList();
		event.shareTangoList = refreshShareTangoList;	// eventにまとめたリストを格納する
		broadcastEvent( event, null ); // 全体にSendSavedTangoEventを送る
	}

	/**
	 * eventをUserInfo exceptを除いたUser全体に対して送る。
	 * @param event
	 * @param except
	 */
	protected void broadcastEvent( Object event, UserInfo except ){
		synchronized( this ){
			Set entrySet = users.entrySet();
			for( Iterator it = entrySet.iterator(); it.hasNext(); ){
				Map.Entry entry = (Map.Entry)it.next();
				UserInfo user = (UserInfo)entry.getValue();
				if( user != except ){
					synchronized( user ){
						user.events.add( event );
						user.notifyAll();
					}
				}
			}
		}
	}
	/**
	 * この関数を呼び出したユーザの情報(UserInfo)を返す。
	 * @return　UserInfo
	 */
	protected UserInfo getCurrentUser(){
		String id = getThreadLocalRequest().getSession().getId();
		synchronized( this ){
			return (UserInfo)users.get(id);
		}
	}	

	/**
	 * Entryしているユーザの中でnameと一致する名前を持つユーザ情報（UserInfo)を返す。
	 * 該当ユーザがいない場合はnullを返す。
	 * @param name
	 * @return
	 */
	protected UserInfo getUserByName( String name ){
		UserInfo user = null;
		synchronized( this ){
			Set entrySet = users.entrySet();
			for( Iterator it = entrySet.iterator(); it.hasNext() && user == null; ){
				Map.Entry entry = (Map.Entry)it.next();
				UserInfo userTemp = (UserInfo)entry.getValue();
				if( userTemp.contact.getName().compareTo(name) == 0 )
					user = userTemp;
			}
		}
		return user;
	}

	/**
	 * 全てのユーザ情報を取得する関数
	 * @return
	 */
	protected ArrayList<ArrayList<PickupTango>> getAllUserTangoList(){
		// UserInfo user = null;
		ArrayList<ArrayList<PickupTango>> allUserTangoList = new ArrayList<ArrayList<PickupTango>>();;
		synchronized( this ){
			Set entrySet = users.entrySet();
			for( Iterator it = entrySet.iterator();it.hasNext();){
				Map.Entry entry = (Map.Entry)it.next();
				UserInfo userTemp = (UserInfo)entry.getValue();
				System.out.print("userTemp=");
				showPickupTangoList(userTemp.savedTangoList);
				allUserTangoList.add(userTemp.savedTangoList);
			}
		}
		if(allUserTangoList.isEmpty()){
			System.out.println("allUserTangoList is empty");
		}else{
			System.out.print("allUserInfo:");
			for(int i=0;i<allUserTangoList.size();i++){
				showPickupTangoList(allUserTangoList.get(i));
			}
		}
		return allUserTangoList;
	}

	private void showPickupTangoList(ArrayList<PickupTango> pickupTangoList){
		String str = "show string default";
		if(pickupTangoList.isEmpty()){
			str = "this pickupTangoList is Empty!";
		}else{
			str = "[";
			for(int i=0;i<pickupTangoList.size();i++){
				str += pickupTangoList.get(i).getName()+ ", ";
			}
			str = str.substring(0, str.length()-3);
			str = "]";
		}
		System.out.println(str);
	}

	/**
	 * String valueを整形する。
	 * 文字数の上限はmaxLength。これを超える文字数は捨てる。
	 * @param value
	 * @param maxLength
	 * @return
	 */
	protected String cleanString( String value, int maxLength ){
		value = value.trim();
		if( value.length() > maxLength )
			value = value.substring(0,maxLength);
		value = value.replaceAll("\\<.*?\\>","");
		return value;
	}
}
