package tango.client.ui;

import java.util.ArrayList;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.SourcesTableEvents;
import com.google.gwt.user.client.ui.TableListener;
import com.google.gwt.user.client.ui.VerticalPanel;

/**
 * @author yasukawa
 * Call WordPanel classes, and show them using FlexTable widget.
 */
public class TangoPanelTable extends Composite {
	VerticalPanel panel = new VerticalPanel();
	FlexTable flexTable;
	int randomNumber;

	/* DefaultのConstructor */
	public TangoPanelTable(){
		HorizontalPanel buttons = new HorizontalPanel();
		panel.add(buttons);
		panel.setCellHorizontalAlignment(buttons, VerticalPanel.ALIGN_CENTER);
		flexTable = new FlexTable();
		flexTable.setSize("100%", "100%");
		panel.add(flexTable);
		flexTable.addStyleName("WordPanelTable-table");
		flexTable.addStyleName("WordPanelTable-panel");

		/* セルがクリックされた時の振る舞い */
		flexTable.addTableListener(new TableListener(){
			public void onCellClicked(SourcesTableEvents sender, int row, int cell) {
				System.out.println("row="+row+", col="+cell);
			}
		});

		flexTable.setWidget(0, 0, new TangoPanel());
		initWidget(panel);
	}

	/* flex tableの中身を消去する */
	public void clearWordPanel(){
		this.flexTable.clear();
	}

	/* 行列(row×col)のflex tableを再生成する */
	public void changeReflect(int row, int col){
		panel.remove(flexTable);
		flexTable = new FlexTable();
		panel.add(flexTable);
		for(int i=0; i<row ; i++){
			for(int j=0; j<col ; j++){
				this.flexTable.setWidget(i, j, new TangoPanel());
			}
		}
		flexTable.setSize("100%", "100%");
	}
	/* saveWordTableの最上段の右端にWord Panelを保存する */
	public void addWordPanel(TangoPanel wpanel){
		int row, col;
		boolean searchFlag = false;
		row=col=0;
		// 削除されたセルの位置をサーチする
		for(row=0; row<10; row++){
			for(col=0; col<10 ; col++){
				/* セルが空白ではない場合 */
				if(this.flexTable.isCellPresent(row, col)==false ||
						this.flexTable.getHTML(row, col).equals("")==true){
					searchFlag = true;
					break;
				}
			}
			if(searchFlag == true)break;
		}
		
		System.out.println("row="+row+", col="+col);
		this.flexTable.setWidget(row, col, wpanel);
	}

	/* flexTableの指定した箇所にWord Panelを保存する */
	public void addWordPanel(int row, int col, TangoPanel wpanel){
		System.out.println("func:saveWordPanel");
		System.out.println("row="+row+", col="+col);
		flexTable.setWidget(row, col, wpanel);
	}

	/* 空白セルを左詰めする。 */
	public void infillSpaces(){
		int row, col;
		int endRow, endCol;
		boolean searchFlag;
		boolean endFlag;
		
		searchFlag = endFlag = false;
		row=col=0;
		endRow=endCol=0;
		
		// 削除されたセルの位置をサーチする
		for(; row<10; row++){
			for(; col<10 ; col++){
				/* セルが空白ではない場合 */
				if(this.flexTable.getHTML(row, col).equals("")==true){
					searchFlag = true;
					break;
				}
			}
			if(searchFlag == true){
				break;
			}else col=0;
		}
		
		System.out.println("DeletedCell=("+row+", "+col+")");
		
		searchFlag = false;
		// 最後尾のセルの位置をサーチする
		for(; endRow<10; endRow++){
			for(; endCol<10 ; endCol++){
				/* セルが空白ではない場合 */
				if(this.flexTable.isCellPresent(endRow, endCol)==false){
					searchFlag = true;
					break;
				}
			}
			if(searchFlag == true){
				break;
			}
			endCol=0;
		}
		
		System.out.println("EndCell=("+endRow+", "+endCol+")");
		
		// この時点で(row,col)==削除されたセル

		// 左詰めする 
		for(;row<10 && row!=endRow;row++){
			for(;col<9 && col!=endCol ; col++){
				if(row==endRow && col==endCol){
					endFlag = true;
					break;
				}
				this.flexTable.setWidget(row, col, this.flexTable.getWidget(row, col+1));
			}
			
			// 9番目のcolに対しての処理
			
			// 0<=col<=8の間にNULLセルが見つかった場合
			if(endFlag == true)	break;
			
			// 改行後のセルがNULLだった場合
			if(row+1==endRow && 0==endCol){
				break;
			}else{
				this.flexTable.setWidget(row, 9, this.flexTable.getWidget(row+1, 0));
			}
			
			col=0;
		}
		
		// 最後尾のWidgetを削除する。
		this.flexTable.removeCell(row, col);
	}
	
	/* tango!ボタンを押したときに、必要に応じて単語をシャッフルする */ 
	public void shuffle(ArrayList<PickupTango> pickupWords){
		int row = this.flexTable.getRowCount();	// 行数
		int col = this.flexTable.getCellCount(row-1); // 列数
		int listSize = pickupWords.size();
		int count = 0;
		panel.remove(flexTable);
		flexTable = new FlexTable();
		panel.add(flexTable);

		/* 行数×列数 > 取ってきた単語数  */
		/* -> 必ず重なる単語があるので、取ってきた単語をもう一度シャッフルして表示する */
		//if(row * col > listSize){
			// Window.alert("row="+row +", col="+col + ", listSize=" + listSize + "\n row * col > listSize");
			for(int i=0; i<row ; i++){
				for(int j=0; j<col ; j++){
					randomNumber = (int)(Math.random() * listSize);
					flexTable.setWidget(i, j, new TangoPanel(pickupWords.get(randomNumber)));
					// System.out.println("i="+i+", j="+j);
				}
			}

			/* 行数×列数  <= 取ってきた単語数の方 */
			/* 取ってきた単語が既にランダムなので、そのまま表示 */
		/*}else{
			// Window.alert("row="+row +", col="+col + ", listSize=" + listSize + "\n row * col <= listSize");
			for(int i=0; i<row ; i++){
				for(int j=0; j<col ; j++){
					flexTable.setWidget(i, j, new TangoPanel(pickupWords.get(count)));
					// System.out.println("i="+i+", j="+j);
					count++;
				}
			}
		}*/
		flexTable.setSize("100%", "100%");
	}
}